package ui;

import game_control.Board;
import game_control.GameController;
import player.IPlayer;
import sun.applet.Main;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

public class GameBoard {
    private JTextArea playerTurnTextArea;
    private JPanel MainPanel;
    private JPanel BoardArea;
    private JLabel[][] fields;

    private Thread waitingForMouseEvent;
    private int clickon;

    public GameBoard() {
        $$$setupUI$$$();
        fields = new JLabel[3][3];
        init();
    }

    public void init() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                JLabel field = new JLabel();
                Border b = BorderFactory.createLineBorder(Color.BLACK);
                field.setIcon(new ImageIcon("background.png"));
                field.setBorder(b);
                Dimension d = new Dimension(200, 130);
                field.setSize(d);
                field.setPreferredSize(d);
                field.setMaximumSize(d);
                field.setMinimumSize(d);
                GridBagConstraints c = new GridBagConstraints();
                c.gridx = j;
                c.gridy = i;
                fields[j][i] = field;
                BoardArea.add(fields[j][i], c);
            }
        }
    }


    public void updateBoard(IPlayer currentPlayer, Board board, java.util.List<IPlayer> playerList) {
        playerTurnTextArea.setText(currentPlayer.getName() + "'s turn");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board.valAt(j, i) == playerList.get(0).minimax()) {
                    fields[j][i].setIcon(playerList.get(0).color());

                } else if (board.valAt(j, i) == playerList.get(1).minimax()) {
                    fields[j][i].setIcon(playerList.get(1).color());
                }
            }
        }
    }

    public void humanPlayersTurn(Board board, int minimax) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board.valAt(j, i) == 0) {
                    fields[j][i].addMouseListener(new MouseListener() {
                        @Override
                        public void mouseClicked(MouseEvent mouseEvent) {
                            for (int i = 0; i < 9; i++) {
                                if (BoardArea.getComponents()[i].equals(mouseEvent.getComponent())) {
                                    clickon = i;
                                    waitingForMouseEvent.interrupt();
                                    break;
                                }
                            }
                        }

                        @Override
                        public void mousePressed(MouseEvent mouseEvent) {

                        }

                        @Override
                        public void mouseReleased(MouseEvent mouseEvent) {

                        }

                        @Override
                        public void mouseEntered(MouseEvent mouseEvent) {

                        }

                        @Override
                        public void mouseExited(MouseEvent mouseEvent) {

                        }
                    });
                }
            }
        }

        waitingForMouseEvent = Thread.currentThread();
        try {
            while (true)
                Thread.sleep(10000);
        } catch (InterruptedException e) {
            board.putVal(clickon % 3, clickon / 3, minimax);
            for (Component c : BoardArea.getComponents()) {
                if (c.getMouseListeners().length > 0)
                    c.removeMouseListener(c.getMouseListeners()[0]);
            }

        }


    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainPanel = new JPanel();
        MainPanel.setLayout(new GridBagLayout());
        playerTurnTextArea = new JTextArea();
        playerTurnTextArea.setAutoscrolls(true);
        playerTurnTextArea.setEditable(false);
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.NORTH;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        MainPanel.add(playerTurnTextArea, gbc);
        BoardArea = new JPanel();
        BoardArea.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        MainPanel.add(BoardArea, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPanel;
    }
}
